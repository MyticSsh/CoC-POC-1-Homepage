# Docker Compose 설정 파일
# 개발 및 프로덕션 환경에서 사용할 수 있는 서비스 정의

version: '3.8'

services:
  # Next.js 애플리케이션 서비스
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: coc-website
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - CUSTOM_KEY=${CUSTOM_KEY}
    env_file:
      - .env.local
    restart: unless-stopped
    networks:
      - coc-network
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 데이터베이스 (향후 확장용)
  db:
    image: postgres:15-alpine
    container_name: coc-postgres
    environment:
      POSTGRES_DB: coc_website
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - coc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐싱 및 세션 관리용)
  redis:
    image: redis:7-alpine
    container_name: coc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - coc-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: coc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - coc-network

# 네트워크 정의
networks:
  coc-network:
    driver: bridge

# 볼륨 정의 (데이터 영속성)
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
